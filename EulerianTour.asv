function [T] = EulerianTour(G)


% check if vertices have names
if (~sum(ismember(G.Nodes.Properties.VariableNames,'Name')))
    % if not, give names using its indices
    Vnames = int2str(1:numnodes(G));
    G.Nodes.Name = split(Vnames);
end

% check if edges have names
if (~sum(ismember(G.Edges.Properties.VariableNames,'Name')))
    % if not, give names using its indices
    Enames = int2str(1:numedges(G));
    G.Edges.Name = split(Enames);
end
 v_id = 1;
G.Edges.dfN = -inf(numedges(G),1);
G.Nodes.dfN = -inf(numnodes(G),1);

T = graph;
T = addnode(T,1);

T.Nodes.origId(1) = v_id;
T.Nodes.Name(1) = G.Nodes.Name(v_id);

currentDf = 0;

% G.Edges.dfN(v_id) = currentDf;
[S,nV] = outedges(G,v_id);

S = S(nV~=v_id);

pre_id = v_id;
while ~isempty(S)
      currentDf = currentDf+1;
      [eidx, w_id] = nextEdge(G, S, pre_id);
     G.Edges.dfN(eidx) = currentDf; 
      if ~ismember(w_id, T.Nodes.origId)
        newNode = table(G.Nodes.Name(w_id), w_id,'VariableNames', {'Name','origId'});
        T = addnode(T,newNode);
      end
    
    % create the edge and its attributes (endpts and original id in G) to be added in T
    newEdge = table([pre_id,w_id],G.Edges.Name(eidx),eidx,G.Edges.dfN(eidx),'VariableNames', {'EndNodes','Name','origId','dfN'});
    T = addedge(T,newEdge);

      [S, pre_id] = FrontierEdge(G, S, w_id, eidx);
%       pre_id = new_id;
end

a = T.Edges.origId;
b = T.Edges.dfN;
[~,bsort]=sort(b); 
    
    H=a(bsort);
    H = H';
%     while numedges(G) ~= numedges(T)
        currentDf = max(G.Edges.dfN);
        S = [];
        for i = 1: numnodes(G)
            currentDf = currentDf +1;
            e = outedges(G, i);
            if ismember(-Inf, G.Edges.dfN(e))     
                S_new = e;
                for k = 1:length(S_new)
                    if isinf(G.Edges.dfN(S_new(k)))
                        S(end+1) = [S_new(k)];
                    end
                end
                pre_id = i;
                [eidx] = NextEdge2(G, S, pre_id);
                
                es = outedges(G, i);
                pos = find(H == es(2));
                b = H(pos);
                H = [H(1:pos), eidx, H(pos+1:end)];
                G.Edges.dfN(eidx) = currentDf;
            end
        end
    end
    T = H;
end